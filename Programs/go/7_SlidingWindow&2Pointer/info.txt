# Fixed sliding window Format


def fixed(arr, k):

    i, j = 0, 0

    while j < len(arr):

        # Do some work

        if j - i + 1 < k:
            j += 1

        elif j - i + 1 == k:
            # Print Ans

            # Remove Calculations for i

            # Slide Window
            i += 1
            j += 1


# Variable sliding window Format


def fixed(arr, k):

    i, j = 0, 0
    contd = None

    while j < len(arr):

        # Do some work

        if contd < k:
            j += 1

        elif contd == k:
            # Print Ans
            pass

        elif contd > k:
            while contd > k:
                # Remove Calculations for i

                # Slide Window
                i += 1
            j += 1


# Fixed sliding window FormatV2 [maxSum with a window size of k]


def fixed_slidingWindow(k):
    l, r = 0, -1
    sm = 0

    for i in range(k):
        sm += arr[i]
        r += 1
    mxsm = max(float("-inf"), sm)

    while r < n - 1:
        # Remove Calculations
        l += 1
        sm -= arr[l]

        # Do work
        r += 1
        sm += arr[r]

        # Find ans
        mxsm = max(mxsm, sm)


# Dynamic sliding window FormatV2

def longest_subarray_with_sum_less_than_k(arr: list[int], k: int) -> int:
    mx_len = 0

    l, r = 0, 0
    sm = 0

    while r < len(arr):
        sm += arr[r]

        if sm > k:  # Keep shrinking unitl condition holds
            sm -= arr[l]
            l += 1

        if sm <= k:  # if condition holds check mx_len
            mx_len = max(mx_len, sm)

        r += 1

    return mx_len



+ Constant window size
+ Longest subarray/substring where <condition>
+ No of subarray where <condition> [using pattern 2]
+ shortest/minimum length <condition>
